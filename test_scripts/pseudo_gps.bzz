include "include/vec2.bzz"

# Actual position of the rescue bot
X = 0
Y = 0

# Estimated position of the rescue bot
X_EST = 0
Y_EST = 0

# Average of estimated position of the rescue bot in one step
X_AVG = 0
Y_AVG = 0

# MIN and MAX of estimated position of the rescue bot in one step
X_MIN = 0
Y_MIN = 0

# Number of GPS accessible robots
NUM_GPSBOTS = 16

# Fraction of moving robots
FRAC_MOVING_GPSBOTS = 0.3

# Number of GPS robots that are moving
NUM_MOVING_GPSBOTS = math.floor(NUM_GPSBOTS * FRAC_MOVING_GPSBOTS)

# Number of connected GPS bots
NUM_CONNECTED_GPSBOTS = 0

	
# Stigmergy GPS beacon table
# The GPS beacon bots put their location in this table
v = stigmergy.create(1)

# Function to avoid obstacle
function avoid_obstacle() {

	# Threshold for avoiding obstacle 
	THRESHOLD = 0.1

	# Wheel velocities
	VEL_LEFT = 8.0
	VEL_RIGHT = 8.0

	# Vector to store sum of all proximity sensors 
	var dist_vec = math.vec2.new(0.0, 0.0)

	# Loop variable
	var i = 0
	while(i <= 7){
		# Convert proximity reading to a vector
		var prox_sense = math.vec2.newp(proximity[i].value, proximity[i].angle)
		# Sum all proximity vlaues
		dist_vec = math.vec2.add(dist_vec, prox_sense)
		i = i+1
	}

	# Some print lines to help tune THRESHOLD
	# Print the distance vector 
	# log("Rob: ", id, " d.x: ", dist_vec.x, " d.y: ", dist_vec.y)

	# Print the distance vector length 
	# log("Rob: ", id, " d: ", math.vec2.length(dist_vec))

	# If there is nothing close-by
	if (math.vec2.length(dist_vec) < THRESHOLD){
		# Keep going straight
		set_wheels(VEL_LEFT, VEL_RIGHT)
	} else {
		if(math.vec2.angle(dist_vec) > 0.0){
			# Turn right
			set_wheels(VEL_LEFT, 0.0)
		} else {
			# Turn left
			set_wheels(0.0, VEL_RIGHT)
		}
	}
}

# Function to print contents of the distance table
function table_print(t) {
  foreach(t, function(key, value) {
      log("Robot: ", value.rid, " X: ", value.x, " Y: ", value.y, " DIST: ", value.dist)
    })
}

# Function to convert GPS data from stigmergy table to a manageable format
function getRangeData() {
	
	r_data = {}
	id_count = 0

	v.foreach(
		function(rid, data) {

			# Debud print statement
			# log("robot ", rid, ": ", "x = ", data.x, ", ", "y = ", data.y)
	        
	        # If the data in the stigmergy table is valid.
	        # i.e. The rescue bot has an active connection to the current GPS bot
			if (neighbors.get(rid)) {
				# Log the current tuple to the table (distances are in meters)
				r_data[id_count] = {.rid = rid, .x = data.x, .y = data.y, .dist = neighbors.get(rid).distance/100}
				# Increment the key index
				id_count = id_count + 1
			}
	    }
    )

    return r_data
}

# Function to trilaterate the location based on information from 3 beacons
function localize(x1, y1, r1, x2, y2, r2, x3, y3, r3) {

	P1 = math.vec2.new(x1, y1)
	P2 = math.vec2.new(x2, y2)
	P3 = math.vec2.new(x3, y3)

	ex1 = math.vec2.sub(P2, P1)
	ex = math.vec2.scale(ex1, 1/math.vec2.length(ex1))

	p3_p1 = math.vec2.sub(P3, P1)

	i = math.vec2.dot(ex, p3_p1)

	ey1 = math.vec2.sub(p3_p1, math.vec2.scale(ex, i))
	ey = math.vec2.scale(ey1, 1/math.vec2.length(ey1))

	d = math.vec2.length(ex1)

	j = math.vec2.dot(ey, p3_p1)

	x = (r1^2 - r2^2 + d^2)/(2*d)

	y = ((r1^2 - r3^2 + i^2 + j^2)/(2*j)) - ((i/j)*x)

	xex = math.vec2.scale(ex, x)
	yey = math.vec2.scale(ey, y)

	tri_pt = math.vec2.add(P1, math.vec2.add(xex, yey))

	# log("Tript.x: ", tri_pt.x, " Tript.y: ", tri_pt.y)

	return tri_pt
}


# Step function for the GPS bots
function gpsBots() {

	# Every GPS bot writes its location to the stigmergy table
	v.put(id, {.x = pose.position.x, .y = pose.position.y})

	# avoid_obstacle()
}


function rescueBots() {

	# Get the number of tuples in the stigmergy table
	# log("The vstig has ", v.size(), " elements")

	# Get the range data from beacons
	range_data = getRangeData()

	# Print GPS beacon data
	# table_print(range_data)

	# Print number of GPS bots connected
	NUM_CONNECTED_GPSBOTS = size(range_data) 
	log("Total Connected GPS bots: ", NUM_CONNECTED_GPSBOTS)


	if (NUM_CONNECTED_GPSBOTS >= 3) {
		# Index for the loop
		idx = 0

		# Estimated position vector
		est_pos = math.vec2.new(0.0, 0.0)

		# Sum of estimated position vector
		est_pos_sum = math.vec2.new(0.0, 0.0)

		# Reset position variables
		X_EST = 0
		Y_EST = 0

		X_MIN = 0
		Y_MIN = 0

		X_MAX = 0
		Y_MAX = 0

		# Iterate taking 3 GPS beacons at a time
		while (idx <= (NUM_CONNECTED_GPSBOTS - 3)) {

			# Trilaterate position
			est_pos = localize(range_data[idx].x, range_data[idx].y, range_data[idx].dist, range_data[idx + 1].x, range_data[idx + 1].y, range_data[idx + 1].dist, range_data[idx + 2].x, range_data[idx + 2].y, range_data[idx + 2].dist)
			X_EST = est_pos.x
			Y_EST = est_pos.y

			# Get range of the extimated values
			X_MIN = math.min(X_MIN, X_EST)
			X_MAX = math.max(X_MAX, X_EST)

			Y_MIN = math.min(Y_MIN, Y_EST)
			Y_MAX = math.max(Y_MAX, Y_EST)

			# Sum all estimated positions
			est_pos_sum = math.vec2.add(est_pos_sum, est_pos)

			idx = idx + 1

		}

		# Average Position
		X_AVG = est_pos_sum.x/idx
		Y_AVG = est_pos_sum.y/idx

		# Print the average estimated position
		log("X_AVG: ", X_AVG, " Y_AVG: ", Y_AVG)

	}

	# Test calls for localize
	# localize(1,0,1,-1,0,1,0,1,1)
	# localize(1.56373, 1.78885, 2.28862, 1.66637, 1.55549, 2.11412, 1.32756, 1.45889, 1.89937)
}


 
# Executed at init time
function init() {

	# Divide the robots into three swarms
	# Swarm 1: Stranded robot
	s1 = swarm.create(1)
	s1.select(id == 0)

	# Swarm 2: rescue robot
	s2 = swarm.create(2)
	s2.select(id == 1)

	# Swarm 3: Moving GPS robots
	s3 = swarm.create(3)
	s3.select((id > 1) and (id <= (NUM_MOVING_GPSBOTS + 1)))

	# Swarm 4: Stationary GPS robots
	s4 = swarm.create(4)
	s4.select(id > (NUM_MOVING_GPSBOTS + 1))

	if (s1.in()) {
		# Color 
		set_leds(255,0,0)
	} 

	if (s2.in()) {
		# Color green
		set_leds(0,255,0)
	}

	if (s3.in()){
		# Color blue
		set_leds(0,0,255)
	}

	if (s4.in()){
		# Color blue
		set_leds(0,128,128)
	} 

}
 
# Executed every time step
function step() {

	# Call gpsBots function
	s3.exec(gpsBots)

	# Call gpsBots function
	s4.exec(gpsBots)

	# Call avoid obstacle function for moving GPSbots
	s3.exec(avoid_obstacle)

	# Call rescueBots function
	s2.exec(rescueBots)	
	# s2.exec(avoid_obstacle)
}
 
# Execute at exit
function destroy() {
}